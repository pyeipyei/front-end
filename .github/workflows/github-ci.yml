# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy to Amazon EKS, when there is a push to the "main" branch and tags.
#
name: Docker ECR and Kubernetes Deployment

on:
  push:
    tags:
    - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_DEFAULT_REGION }}

    - name: Build Docker image
      env:
        IMAGE_TAG: latest
      run: |
        DOCKER_TAG=$(echo "${GITHUB_REF}" | cut -d'/' -f 3)
        docker build -t gic-dx-its-mgt-front:$IMAGE_TAG .
        docker tag gic-dx-its-mgt-front:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}:${DOCKER_TAG}
        docker tag gic-dx-its-mgt-front:$IMAGE_TAG ${{ vars.ECR_REPOSITORY }}:$IMAGE_TAG

    - name: Authenticate to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION}} | docker login --username AWS --password-stdin ${{ vars.ECR_REGISTRY }}

    - name: Push Docker image to Amazon ECR
      run: |
        DOCKER_TAG=$(echo "${GITHUB_REF}" | cut -d'/' -f 3)
        docker push ${{ vars.ECR_REPOSITORY }}:${DOCKER_TAG}
        docker push ${{ vars.ECR_REPOSITORY }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_EKS_DEFAULT_REGION }}

    - name: Set up kubectl for Amazon EKS
      run: aws eks --region ${{ vars.AWS_EKS_DEFAULT_REGION}} update-kubeconfig --name ${{ vars.AWS_EKS_CLUSTER_NAME}}

    - name: Deploy to Amazon EKS
      run: |
        kubectl delete -f front-deployment.yml --namespace ${{ vars.AWS_EKS_NAMESPACE}}
        kubectl apply -f front-deployment.yml --namespace ${{ vars.AWS_EKS_NAMESPACE}}